<script>
(function($) {
  var ProductMediaSlider = {
    swatchOptionId: null,
    flexsliderContainer: $('#flexslider'),
    STEP_SIZE: 5,
    KEY_ENTER: 13,
    KEY_LEFT: 37,
    KEY_UP: 38,
    KEY_RIGHT: 39,
    KEY_DOWN: 40,

    /**
     * [init description]
     * @return {[type]} [description]
     */
    init: function() {
      ProductMediaSlider.swatchLink = $('.swatch-link');

      ProductMediaSlider.bindSwatches();
      ProductMediaSlider.initFlexslider();
    },

    /**
     * [initFlexslider description]
     * @return {[type]} [description]
     */
    initFlexslider: function() {
      ProductMediaSlider.flexsliderContainer.removeData("flexslider");
      ProductMediaSlider.flexsliderContainer.flexslider({
        animation: "slide",
        controlNav: false,
        slideshow: false,
        before: function() {
          ProductMediaSlider.destroyZoom();
        },
        after: function() {
          ProductMediaSlider.createZoom($('.flex-active-slide img'));
        },
      });
    },

    /**
     * [bindSwatches description]
     * @return {[type]} [description]
     */
    bindSwatches: function() {
      ProductMediaSlider.swatchLink.on('click', function() {
        ProductMediaSlider.swatchOptionId = $(this).attr('id').slice(6);
        ProductMediaSlider.setSlides();
      });
    },

    /**
     * [setSlides description]
     */
    setSlides: function() {
      var output = ProductMediaSlider.prepareSlidesHtml();
      ProductMediaSlider.smartReplace(ProductMediaSlider.flexsliderContainer, output);
      ProductMediaSlider.initFlexslider();
    },

    /**
     * [prepareSlidesHtml description]
     * @return {[type]} [description]
     */
    prepareSlidesHtml: function() {
      var images = ProductMediaSlider.getSlidesSrc();
      var output = '<ul class="slides product-image-gallery">';
      $.each(images, function(index, value) {
        output += '<li><img id="image-' + value.img_id +'" src="' + value.src +'" class="gallery-image lazyautosizes lazyloaded" data-zoom-image="' + value.zoom + '"></li>';

      });
      output += '</ul>';
      return output;
    },

    /**
     * Get the url source of all the slides for the selected color
     * @return {[type]} [description]
     */
    getSlidesSrc: function() {
      return AssociatedProductImages.products.filter(function(product) {
        if (product.swatch === ProductMediaSlider.swatchOptionId) {
          return product;
        }
      })[0].images;
    },

    /**
     * [smartReplace description]
     * @param  {[type]} block       [description]
     * @param  {[type]} replacement [description]
     * @return {[type]}             [description]
     */
    smartReplace: function(block, replacement) {
      block.wrapInner("<div class='death-row'></div>");
      block.append(replacement);
      $('.death-row').remove();
    },
    /**
     * [createZoom description]
     * @param  {[type]} image [description]
     * @return {[type]}       [description]
     */
    createZoom: function(image) {
        if(
            // Don't use zoom on devices where touch has been used
            PointerManager.getPointer() == PointerManager.TOUCH_POINTER_TYPE
            // Don't use zoom when screen is small, or else zoom window shows outside body
            || Modernizr.mq("screen and (max-width:" + bp.medium + "px)")
        ) {
            return; // zoom not enabled
        }

        if (ProductMediaSlider.isLargeImage(image)) {
          image.parents('.product-image').addClass('zoom-available');
        } else {
          image.parents('.product-image').removeClass('zoom-available');
          return;
        }
        image.elevateZoom();
        ProductMediaSlider.bindKeyboardZoom(image);
    },
    destroyZoom: function() {
        $('.zoomContainer').remove();
        $('.product-image-gallery .gallery-image').removeData('elevateZoom');
    },
    /**
     * [isLargeImage description]
     * @param  {[type]}  image [description]
     * @return {Boolean}       [description]
     */
    isLargeImage: function(image) {
      if(image.length !== 1){
        return;
      }
      var widthDiff  = image[0].naturalWidth - image.width(); 
      var heightDiff = image[0].naturalHeight - image.height(); 
      return (widthDiff >= 0) || (heightDiff >= 0);
    },
    bindKeyboardZoom: function(image) {
      $('#flexslider').on("keydown", function(e) {
        if (e.keyCode == ProductMediaSlider.KEY_ENTER) {
          ProductMediaSlider.keyboardZoom(e, image);
        }
      });
    },
    keyboardZoom: function(e, image) {
      ElevateZoom = image.data('elevateZoom');
      // ElevateZoom.startZoom();
      ElevateZoom.setPosition(ProductMediaSlider.calcCenterPosition(ElevateZoom, image));
      image.mouseover();

      $(document).on("keydown", function(e) {
        if (e.keyCode == ProductMediaSlider.KEY_UP) {
          ProductMediaSlider.handleKeyboardPan(ElevateZoom, image, 0, -1);
        } else if (e.keyCode == ProductMediaSlider.KEY_DOWN) {
          ProductMediaSlider.handleKeyboardPan(ElevateZoom, image, 0, 1);
        } else if (e.keyCode == ProductMediaSlider.KEY_LEFT) {
          ProductMediaSlider.handleKeyboardPan(ElevateZoom, image, -1, 0);
        } else if (e.keyCode == ProductMediaSlider.KEY_RIGHT) {
          ProductMediaSlider.handleKeyboardPan(ElevateZoom, image, 1, 0);
        } else if (e.keyCode == ProductMediaSlider.KEY_ESC) {
          if (ElevateZoom.isLensActive) {
            ElevateZoom.setElements("hide");
            ElevateZoom.keyFocus = false;
          } else {
            // Don't cancel the event.
            return;
          }
        } else {
          // Skip it, not interesting.  We don't want to cancel.
          return;
          // If we didn't bail, it means we handled the event.
          // Prevent it from doing other silly things like scrolling the page.
        }
        e.preventDefault();
      });
    },
    handleKeyboardPan: function(ElevateZoom, image, deltaX, deltaY) {
      // Great, we have a winner.  Now let's move the viewport.
      if (!ElevateZoom.currentLoc) {
        ElevateZoom.currentLoc = ProductMediaSlider.calcCenterPosition(ElevateZoom, image);
      }
      
      ElevateZoom.currentLoc.clientX += deltaX * ProductMediaSlider.STEP_SIZE;
      ElevateZoom.currentLoc.clientY += deltaY * ProductMediaSlider.STEP_SIZE;
      ElevateZoom.currentLoc.pageX += deltaX * ProductMediaSlider.STEP_SIZE;
      ElevateZoom.currentLoc.pageY += deltaY * ProductMediaSlider.STEP_SIZE;
      // ElevateZoom.currentLoc = ElevateZoom.clampPositionToBounds(ElevateZoom.currentLoc);

      ElevateZoom.setPosition(ElevateZoom.currentLoc);
      ElevateZoom.lastX = ElevateZoom.currentLoc.clientX;
      ElevateZoom.lastY = ElevateZoom.currentLoc.clientY;
    },

    recalcElemPos: function(ElevateZoom, image) {
      // We do this often in case other page elements change.
      ElevateZoom.nzWidth = image.width();
      ElevateZoom.nzHeight = image.height();
      ElevateZoom.nzOffset = image.offset();
    },
    calcCenterPosition: function(ElevateZoom, image) {
      // Recalculate the element size and pos.
      ProductMediaSlider.recalcElemPos(ElevateZoom, image);

      // Now just grab the center of the bounds.  Easy.
      var bounds = ProductMediaSlider.calcPositionBounds(ElevateZoom, image);
      var pos = {
        pageX: ElevateZoom.nzOffset.left + Math.floor(bounds.left + (bounds.right - bounds.left) / 2),
        pageY: ElevateZoom.nzOffset.top + Math.floor(bounds.top + (bounds.bottom - bounds.top) / 2),
      };
      pos.clientX = pos.pageX;
      pos.clientY = pos.pageY;
      return pos;
    },
    calcPositionBounds: function(ElevateZoom, image) {
      var bounds = {};

      //calculate the bound regions - but only if zoom window
      if (ElevateZoom.options.zoomType == "window") {
        bounds.top = ElevateZoom.zoomLens.height() / 2;
        bounds.bottom = ElevateZoom.nzHeight - (ElevateZoom.zoomLens.height() / 2) - (ElevateZoom.options.lensBorderSize * 2);
        bounds.left = 0 + (ElevateZoom.zoomLens.width() / 2);
        bounds.right = ElevateZoom.nzWidth - (ElevateZoom.zoomLens.width() / 2) - (ElevateZoom.options.lensBorderSize * 2);
      }
      //calculate the bound regions - but only for inner zoom
      if (ElevateZoom.options.zoomType == "inner") {
        bounds.top = (ElevateZoom.nzHeight / 2) / ElevateZoom.heightRatio;
        bounds.bottom = ElevateZoom.nzHeight - ((ElevateZoom.nzHeight / 2) / ElevateZoom.heightRatio);
        bounds.left = 0 + ((ElevateZoom.nzWidth / 2) / ElevateZoom.widthRatio);
        bounds.right = ElevateZoom.nzWidth - (ElevateZoom.nzWidth / 2) / ElevateZoom.widthRatio - (ElevateZoom.options.lensBorderSize * 2);
      }

      return bounds;
    }
  }

  window.ProductMediaSlider = ProductMediaSlider;

}(jQuery));

ProductMediaSlider.init();
</script>